{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","comps/Modal.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timeStamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unSub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","motion","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animated","transition","delay","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df26d6ff.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firebase-storage\";\nimport \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCO2QRBxBqQEuIqi6wKJZU1Resn10kMzG8\",\n  authDomain: \"deadviz-firegram.firebaseapp.com\",\n  projectId: \"deadviz-firegram\",\n  storageBucket: \"deadviz-firegram.appspot.com\",\n  messagingSenderId: \"474191622653\",\n  appId: \"1:474191622653:web:221103a69c1807e10be994\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timeStamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectStorage, projectFirestore, timeStamp };\n","import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unSub = projectFirestore\n      .collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot(\n        //real time taking updation of new files and storing them in snap object.\n        (snap) => {\n          let documents = [];\n          snap.forEach((doc) => {\n            documents.push({ ...doc.data(), id: doc.id });\n          });\n          setDocs(documents);\n        }\n      );\n\n    return () => unSub(); //un-subscribe from the collection when we don't need it {clean up function}\n  }, [collection]);\n\n  return { docs };\n};\n\nexport default useFirestore;\n","import React from \"react\";\nimport useFirestore from \"../hooks/useFirestore\";\nimport { motion } from \"framer-motion\";\n\nconst ImageGrid = ({ setSelectedImg }) => {\n  const { docs } = useFirestore(\"images\");\n\n  return (\n    <div className=\"img-grid\">\n      {docs &&\n        docs.map((doc) => {\n          return (\n            <motion.div\n              className=\"img-wrap\"\n              key={doc.id}\n              layout\n              whileHover={{ opacity: 1 }}\n              onClick={() => setSelectedImg(doc.url)}\n            >\n              <motion.img\n                src={doc.url}\n                alt=\"uploaded pic\"\n                initial={{ opacity: 0.8 }}\n                animated={{ opacity: 1 }}\n                transition={{ delay: 1 }}\n              ></motion.img>\n            </motion.div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default ImageGrid;\n","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from \"react\";\nimport {\n  projectStorage,\n  projectFirestore,\n  timeStamp,\n} from \"../firebase/config\";\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    //references\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection(\"images\");\n\n    /* asynchronous - it takes some time to complete \n    we put a listener which which be called several times and a function attached to it.*/\n    storageRef.put(file).on(\n      \"state_changed\",\n      (snap) => {\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n        setProgress(percentage);\n      },\n      (err) => {\n        setError(err);\n      },\n\n      //asynchronous function with await\n      async () => {\n        const url = await storageRef.getDownloadURL();\n\n        //adding images collection to database so that later we can show it on frontend.\n        const createdAt = timeStamp();\n        collectionRef.add({ url, createdAt });\n        setUrl(url);\n      }\n    );\n  }, [file]);\n\n  return { progress, url, error };\n};\n\nexport default useStorage;\n","import React, { useEffect } from \"react\";\nimport useStorage from \"../hooks/useStorage\";\nimport { motion } from \"framer-motion\";\n\nconst ProgressBar = ({ file, setFile }) => {\n  const { url, progress } = useStorage(file);\n\n  useEffect(() => {\n    if (url) {\n      setFile(null);\n    }\n  }, [url, setFile]);\n\n  return (\n    <motion.div\n      className=\"progress-bar\"\n      initial={{ width: 0 }}\n      animate={{ width: progress + \"%\" }}\n    ></motion.div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useState } from \"react\";\nimport ProgressBar from \"./ProgressBar\";\n\nconst UploadForm = () => {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  const types = [\"image/png\", \"image/jpeg\"];\n\n  const changeHandler = (e) => {\n    let selected = e.target.files[0];\n\n    if (selected && types.includes(selected.type)) {\n      setFile(selected);\n      setError(\"\");\n    } else {\n      setFile(null);\n      setError(\"Please select an image file (png or jpeg)\");\n    }\n  };\n  return (\n    <form>\n      <label>\n        <input type=\"file\" onChange={changeHandler} />\n        <span>+</span>\n      </label>\n      <div className=\"output\">\n        {error && <div className=\"error\">{error}</div>}\n        {file && <div>{file.name}</div>}\n        {file && <ProgressBar file={file} setFile={setFile} />}\n      </div>\n    </form>\n  );\n};\n\nexport default UploadForm;\n","import React from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst Modal = ({ selectedImg, setSelectedImg }) => {\n  const clickHandler = (e) => {\n    if (e.target.classList.contains(\"backdrop\")) {\n      setSelectedImg(null);\n    }\n  };\n\n  return (\n    <motion.div\n      className=\"backdrop\"\n      onClick={clickHandler}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img\n        src={selectedImg}\n        alt=\"enlarged pic\"\n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  );\n};\n\nexport default Modal;\n","import React, { useState } from \"react\";\nimport ImageGrid from \"./comps/ImageGrid\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\nimport Modal from \"./comps/Modal\";\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}