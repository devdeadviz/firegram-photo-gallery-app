{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timeStamp } from \"../firebase/config\";\n\nconst useStorage = file => {\n  _s();\n\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  useEffect(() => {\n    //references\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection(\"images\");\n    /* asynchronous - it takes some time to complete \n    we put a listener which which be called several times and a function attached to it.*/\n\n    storageRef.put(file).on(\"state_changed\", snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, //asynchronous function with await\n    async () => {\n      const url = await storageRef.getDownloadURL(); //adding images collection to database so that later we can show it on frontend.\n\n      const createdAt = timeStamp();\n      collectionRef.add({\n        url,\n        createdAt\n      });\n      setUrl(url);\n    });\n  }, [file]);\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\n_s(useStorage, \"xn2AiAzche7NzWswJ7VS1PhvjkU=\");\n\nexport default useStorage;","map":{"version":3,"sources":["/media/devdeadviz/1AAA83FAAA83D125/Projects/firegram-photo-gallery-app/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","projectFirestore","timeStamp","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","createdAt","add"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SACEC,cADF,EAEEC,gBAFF,EAGEC,SAHF,QAIO,oBAJP;;AAMA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMY,UAAU,GAAGX,cAAc,CAACY,GAAf,CAAmBR,IAAI,CAACS,IAAxB,CAAnB;AACA,UAAMC,aAAa,GAAGb,gBAAgB,CAACc,UAAjB,CAA4B,QAA5B,CAAtB;AAEA;AACJ;;AACIJ,IAAAA,UAAU,CAACK,GAAX,CAAeZ,IAAf,EAAqBa,EAArB,CACE,eADF,EAEGC,IAAD,IAAU;AACR,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACAf,MAAAA,WAAW,CAACa,UAAD,CAAX;AACD,KALH,EAMGG,GAAD,IAAS;AACPd,MAAAA,QAAQ,CAACc,GAAD,CAAR;AACD,KARH,EAUE;AACA,gBAAY;AACV,YAAMb,GAAG,GAAG,MAAME,UAAU,CAACY,cAAX,EAAlB,CADU,CAGV;;AACA,YAAMC,SAAS,GAAGtB,SAAS,EAA3B;AACAY,MAAAA,aAAa,CAACW,GAAd,CAAkB;AAAEhB,QAAAA,GAAF;AAAOe,QAAAA;AAAP,OAAlB;AACAd,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAlBH;AAoBD,GA3BQ,EA2BN,CAACL,IAAD,CA3BM,CAAT;AA6BA,SAAO;AAAEC,IAAAA,QAAF;AAAYI,IAAAA,GAAZ;AAAiBF,IAAAA;AAAjB,GAAP;AACD,CAnCD;;GAAMJ,U;;AAqCN,eAAeA,UAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport {\n  projectStorage,\n  projectFirestore,\n  timeStamp,\n} from \"../firebase/config\";\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    //references\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection(\"images\");\n\n    /* asynchronous - it takes some time to complete \n    we put a listener which which be called several times and a function attached to it.*/\n    storageRef.put(file).on(\n      \"state_changed\",\n      (snap) => {\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n        setProgress(percentage);\n      },\n      (err) => {\n        setError(err);\n      },\n\n      //asynchronous function with await\n      async () => {\n        const url = await storageRef.getDownloadURL();\n\n        //adding images collection to database so that later we can show it on frontend.\n        const createdAt = timeStamp();\n        collectionRef.add({ url, createdAt });\n        setUrl(url);\n      }\n    );\n  }, [file]);\n\n  return { progress, url, error };\n};\n\nexport default useStorage;\n"]},"metadata":{},"sourceType":"module"}