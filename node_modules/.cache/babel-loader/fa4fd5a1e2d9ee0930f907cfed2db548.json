{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = collection => {\n  _s();\n\n  const [docs, setDocs] = useState([]);\n  useEffect(() => {\n    const unSub = projectFirestore.collection(collection).orderBy(\"createdAt\", \"desc\").onSnapshot( //real time taking updation of new files and storing them in snap object.\n    snap => {\n      let documents = [];\n      snap.forEach(doc => {\n        documents.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      setDocs(documents);\n    });\n    return () => unSub(); //un-subscribe from the collection when we don't need it {clean up function}\n  }, [collection]);\n  return {\n    docs\n  };\n};\n\n_s(useFirestore, \"+T0lE56vJ9KU8atjOm2u+g1P1HQ=\");\n\nexport default useFirestore;","map":{"version":3,"sources":["/media/devdeadviz/1AAA83FAAA83D125/Projects/firegram-photo-gallery-app/src/hooks/useFirestore.js"],"names":["useState","useEffect","projectFirestore","useFirestore","collection","docs","setDocs","unSub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AAAA;;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,KAAK,GAAGL,gBAAgB,CAC3BE,UADW,CACAA,UADA,EAEXI,OAFW,CAEH,WAFG,EAEU,MAFV,EAGXC,UAHW,EAIV;AACCC,IAAAA,IAAD,IAAU;AACR,UAAIC,SAAS,GAAG,EAAhB;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBF,QAAAA,SAAS,CAACG,IAAV,CAAe,EAAE,GAAGD,GAAG,CAACE,IAAJ,EAAL;AAAiBC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAzB,SAAf;AACD,OAFD;AAGAV,MAAAA,OAAO,CAACK,SAAD,CAAP;AACD,KAXS,CAAd;AAcA,WAAO,MAAMJ,KAAK,EAAlB,CAfc,CAeQ;AACvB,GAhBQ,EAgBN,CAACH,UAAD,CAhBM,CAAT;AAkBA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CAtBD;;GAAMF,Y;;AAwBN,eAAeA,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unSub = projectFirestore\n      .collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot(\n        //real time taking updation of new files and storing them in snap object.\n        (snap) => {\n          let documents = [];\n          snap.forEach((doc) => {\n            documents.push({ ...doc.data(), id: doc.id });\n          });\n          setDocs(documents);\n        }\n      );\n\n    return () => unSub(); //un-subscribe from the collection when we don't need it {clean up function}\n  }, [collection]);\n\n  return { docs };\n};\n\nexport default useFirestore;\n"]},"metadata":{},"sourceType":"module"}